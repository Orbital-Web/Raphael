// tuned using https://github.com/GediminasMasaitis/texel-tuner
#pragma once

#include <string>
#include <vector>

#include "../base.h"
#include "../external/chess.hpp"


using std::string;


namespace Raphael {
struct RaphaelParams {
    int KING_DIST_WEIGHT[2] = {0, 20};

    // PVAL
    int KNIGHT[2] = {329, 201};
    int BISHOP[2] = {381, 214};
    int ROOK[2] = {430, 377};
    int QUEEN[2] = {770, 705};
    static constexpr int KING = 0;

    // PST
    static constexpr int PST_START = 5;
    int PAWN_MID[64] = {
        0,   0,   0,   0,  0,   0,   0,   0,     //
        33,  123, 66,  98, 37,  119, -36, -172,  //
        35,  58,  74,  94, 135, 177, 108, 55,    //
        6,   36,  26,  61, 71,  50,  52,  11,    //
        -18, -9,  21,  41, 47,  36,  24,  -9,    //
        -8,  -6,  16,  15, 36,  34,  60,  20,    //
        -12, 2,   -10, 1,  13,  62,  68,  11,    //
        0,   0,   0,   0,  0,   0,   0,   0,     //
    };
    int PAWN_END[64] = {
        0,   0,   0,   0,   0,   0,   0,   0,    //
        157, 130, 89,  50,  85,  78,  156, 180,  //
        16,  -12, -30, -84, -93, -60, -29, -14,  //
        27,  6,   -1,  -34, -19, -16, -2,  5,    //
        16,  7,   -7,  -18, -16, -12, -12, -2,   //
        1,   -1,  -6,  -10, -7,  -7,  -23, -13,  //
        5,   -4,  9,   -11, -3,  -6,  -19, -17,  //
        0,   0,   0,   0,   0,   0,   0,   0,    //
    };
    int KNIGHT_MID[64] = {
        -34, -12, 98,  130, 254, 20,  154, -7,   //
        68,  113, 262, 225, 255, 261, 150, 149,  //
        104, 268, 236, 280, 347, 388, 279, 255,  //
        183, 205, 219, 259, 231, 282, 216, 221,  //
        165, 198, 213, 202, 222, 209, 228, 181,  //
        152, 172, 199, 200, 225, 213, 210, 159,  //
        141, 106, 160, 192, 193, 208, 153, 181,  //
        6,   166, 131, 151, 184, 186, 165, 146,  //
    };
    int KNIGHT_END[64] = {
        72,  135, 133, 118, 113, 112, 61,  40,   //
        124, 156, 122, 162, 129, 118, 131, 96,   //
        130, 130, 172, 158, 131, 130, 134, 102,  //
        127, 161, 190, 175, 178, 168, 164, 129,  //
        133, 150, 178, 185, 175, 184, 159, 122,  //
        112, 144, 147, 174, 158, 138, 137, 120,  //
        112, 145, 143, 137, 145, 124, 127, 91,   //
        132, 85,  129, 139, 118, 102, 86,  83,   //
    };
    int BISHOP_MID[64] = {
        88,  103, -68, -11, 6,   57,  21,  98,   //
        65,  99,  71,  72,  160, 137, 105, 34,   //
        79,  129, 128, 145, 148, 216, 143, 123,  //
        90,  100, 119, 144, 126, 137, 111, 101,  //
        111, 133, 99,  122, 127, 92,  98,  142,  //
        118, 133, 121, 98,  108, 120, 128, 119,  //
        145, 128, 127, 104, 111, 141, 148, 122,  //
        60,  134, 130, 115, 151, 108, 85,  98,   //
    };
    int BISHOP_END[64] = {
        85,  103, 131, 119, 121, 109, 104, 80,   //
        112, 117, 116, 99,  92,  98,  95,  104,  //
        117, 102, 98,  85,  87,  73,  105, 109,  //
        105, 106, 97,  102, 92,  97,  106, 120,  //
        103, 89,  109, 103, 90,  98,  100, 96,   //
        109, 105, 100, 106, 102, 92,  98,  105,  //
        83,  82,  88,  102, 101, 89,  93,  89,   //
        105, 101, 91,  104, 88,  99,  94,  91,   //
    };
    int ROOK_MID[64] = {
        230, 230, 221, 272, 266, 181, 177, 229,  //
        200, 190, 242, 257, 281, 279, 212, 245,  //
        146, 211, 200, 240, 205, 259, 308, 216,  //
        142, 151, 183, 183, 193, 218, 181, 174,  //
        116, 126, 143, 154, 170, 142, 198, 133,  //
        106, 129, 145, 146, 166, 164, 178, 143,  //
        112, 147, 146, 164, 176, 174, 188, 94,   //
        147, 146, 150, 163, 171, 167, 146, 168,  //
    };
    int ROOK_END[64] = {
        273, 277, 276, 264, 271, 289, 293, 282,  //
        293, 297, 283, 277, 266, 267, 286, 277,  //
        303, 287, 286, 275, 272, 264, 258, 271,  //
        294, 293, 290, 280, 278, 274, 280, 292,  //
        292, 292, 291, 280, 274, 273, 263, 290,  //
        280, 281, 268, 274, 264, 253, 264, 267,  //
        280, 268, 276, 267, 263, 257, 249, 272,  //
        268, 276, 281, 271, 264, 265, 264, 237,  //
    };
    int QUEEN_MID[64] = {
        590, 578, 594, 602, 724, 756, 689, 639,  //
        560, 529, 594, 602, 584, 701, 622, 680,  //
        581, 569, 588, 598, 658, 724, 709, 675,  //
        565, 570, 572, 573, 588, 607, 604, 604,  //
        585, 553, 578, 578, 585, 588, 612, 599,  //
        576, 605, 589, 590, 584, 604, 604, 604,  //
        543, 589, 613, 607, 606, 619, 594, 639,  //
        593, 575, 587, 615, 580, 565, 530, 532,  //
    };
    int QUEEN_END[64] = {
        582, 648, 665, 639, 582, 574, 577, 634,  //
        600, 642, 653, 663, 683, 606, 647, 592,  //
        601, 645, 636, 665, 653, 626, 609, 628,  //
        605, 621, 649, 671, 675, 656, 678, 664,  //
        570, 636, 633, 661, 643, 648, 620, 631,  //
        569, 561, 610, 593, 619, 596, 612, 612,  //
        581, 563, 545, 565, 578, 558, 541, 513,  //
        555, 549, 560, 522, 580, 544, 584, 522,  //
    };
    int KING_MID[64] = {
        -32, 268, 323, 73,   -108, -83,  108,  -23,   //
        221, 61,  -97, 125,  65,   -127, -81,  -163,  //
        45,  -40, -9,  -5,   7,    131,  27,   -22,   //
        -7,  -85, -56, -140, -113, -108, -37,  -168,  //
        -96, 9,   -70, -156, -129, -126, -120, -156,  //
        18,  6,   -46, -97,  -93,  -87,  -27,  -57,   //
        46,  11,  -37, -98,  -72,  -31,  29,   45,    //
        -33, 60,  42,  -90,  26,   -33,  78,   54,    //
    };
    int KING_END[64] = {
        -104, -97, -101, -37, 19,  9,   -4,  -41,  //
        -44,  19,  56,   3,   22,  62,  63,  36,   //
        3,    52,  41,   26,  32,  36,  54,  19,   //
        2,    46,  52,   64,  52,  60,  47,  34,   //
        -4,   3,   39,   61,  56,  53,  42,  13,   //
        -32,  -0,  24,   39,  40,  33,  11,  -5,   //
        -51,  -10, 18,   20,  22,  11,  -14, -44,  //
        -75,  -54, -34,  -10, -48, -18, -63, -93,  //
    };

    // PMASK
    static constexpr int PMASK_START = PST_START + 64 * 6;
    int PASSEDBONUS[7][2] = {
        {0,   0  }, // promotion line
        {80,  151},
        {10,  167},
        {4,   69 },
        {-11, 42 },
        {1,   15 },
        {13,  8  },
    };
    int ISOLATION_WEIGHT[2] = {26, 4};

    // MOBILITY
    static constexpr int MOB_START = PMASK_START + 8;
    int MOBILITY_BISHOP[2] = {10, 6};
    int MOBILITY_ROOK[2] = {9, 3};
    int BISH_PAIR_WEIGHT[2] = {0, 0};
    int BISH_CORNER_WEIGHT[2] = {0, 40};

    static constexpr int PARAM_SIZE = MOB_START + 4;

    operator parameters_t() const;
    static void repr(parameters_t parameters);
};


class RaphaelEval {
public:
    constexpr static bool includes_additional_score = true;
    constexpr static bool supports_external_chess_eval = true;
    constexpr static bool retune_from_zero = false;
    constexpr static tune_t preferred_k = 0;
    constexpr static int32_t max_epoch = 5001;
    constexpr static bool enable_qsearch = true;
    constexpr static bool filter_in_check = false;
    constexpr static tune_t initial_learning_rate = 0.5;
    constexpr static int32_t learning_rate_drop_interval = 10000;
    constexpr static tune_t learning_rate_drop_ratio = 1;
    constexpr static int32_t data_load_print_interval = 10000;

    static parameters_t get_initial_parameters();
    static EvalResult get_fen_eval_result(const std::string& fen, const parameters_t& parameters);
    static EvalResult get_external_eval_result(
        const chess::Board& board, const parameters_t& parameters
    );
    static void print_parameters(const parameters_t& parameters);
};
}  // namespace Raphael
